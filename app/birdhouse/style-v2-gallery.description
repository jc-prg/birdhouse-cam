To achieve your goal using CSS, where you want to use float:left, ensure all images have the same width,
align 4 images per row with a bit of margin, and clear the lines while keeping the description text
aligned under each image, you can proceed as follows:

Hereâ€™s the CSS to accomplish this:
CSS:

/* Main container for the images */
.frame_column {
    width: 100%;             /* Make the container take up the full width */
    overflow: hidden;        /* This ensures the floated elements don't overflow */
    margin: 0 auto;          /* Center the container horizontally */
    padding: 10px;           /* Optional: Add padding to the container */
}

/* Styling for each image container */
.image_container {
    float: left;             /* Use float to position elements side by side */
    width: calc(25% - 20px); /* 4 images per row, with margin between them */
    margin: 10px;            /* Space between the images (margin on all sides) */
    box-sizing: border-box;  /* Ensure padding and margins are included in the width calculation */
}

/* Thumbnail container styling */
.thumbnail_container {
    text-align: center;      /* Center-align the text below the image */
}

/* Styling for images */
.thumbnail_container img {
    width: 100%;             /* Make images fill the container width */
    height: auto;            /* Maintain aspect ratio */
    display: block;          /* Remove bottom space/whitespace under images */
    margin: 0 auto;          /* Center the image horizontally if needed */
}

/* Styling for image descriptions */
.thumbnail_container br {
    display: none;           /* Hide <br> tag, assuming description text is on the next line */
}

.thumbnail_container p {
    font-size: 14px;         /* Adjust font size for description */
    color: #555;             /* Darker text color */
    margin-top: 8px;         /* Add space between image and description */
    text-align: center;      /* Center the description text */
}

/* Clear floats after each row of images */
.frame_column::after {
    content: "";
    display: table;
    clear: both;             /* Ensures the float is cleared and the container has correct height */
}

Explanation of Key Points:

    .frame_column:

        overflow: hidden;: This ensures that floated elements inside the container do not cause layout issues by overflowing outside the container.

        margin: 0 auto;: Centers the .frame_column container on the page.

        padding: 10px;: Optional padding around the container.

    .image_container:

        float: left;: Floats each image container to the left, so they appear side by side.

        width: calc(25% - 20px);: This sets the width of each image container to 25% of the parent container, but subtracts 20px to account for the margins between them (10px left + 10px right).

        margin: 10px;: Adds 10px margin around each image container, creating space between the images.

    .thumbnail_container:

        text-align: center;: Centers the text (description) below each image.

        Removed the <br> tag by hiding it (display: none;) and using a paragraph (<p>) for better structure.

    .thumbnail_container img:

        width: 100%; height: auto;: Makes the image responsive by ensuring it takes up 100% of the container's width and maintains its aspect ratio.

        display: block;: Removes the extra space that might appear below the image due to it being inline.

        margin: 0 auto;: Centers the image horizontally if it needs it.

    .frame_column::after:

        This is a clearfix technique that ensures the container wraps around the floated elements properly. The clear: both; clears any floats that might cause layout issues.

Example HTML:

<div class="frame_column">
  <div class="image_container">
    <div class="thumbnail_container">
      <img src="some/url/image1.jpg" alt="Image 1">
      <p>Image description 1</p>
    </div>
  </div>
  <div class="image_container">
    <div class="thumbnail_container">
      <img src="some/url/image2.jpg" alt="Image 2">
      <p>Image description 2</p>
    </div>
  </div>
  <div class="image_container">
    <div class="thumbnail_container">
      <img src="some/url/image3.jpg" alt="Image 3">
      <p>Image description 3</p>
    </div>
  </div>
  <div class="image_container">
    <div class="thumbnail_container">
      <img src="some/url/image4.jpg" alt="Image 4">
      <p>Image description 4</p>
    </div>
  </div>
  <!-- More image containers as needed -->
</div>

Key Considerations:

    Responsive Layout: The layout will be responsive because the image containers use percentages (calc(25% - 20px)),
    so when the screen size changes, the images will adjust automatically. However, you may want to consider adding a
    media query if you want to make the layout more flexible at smaller screen sizes (like 2 images per row on mobile).

    Alignment of Description: The description text (<p>) is aligned under each image, and the height will vary depending
    on the content, but the layout will keep it clean and aligned with the image above.

Optional Enhancements:

    Media Query for Smaller Screens: If you'd like to make the layout responsive on smaller screens, you can use a media
    query to change the number of images per row.

@media (max-width: 768px) {
    .image_container {
        width: calc(50% - 20px);  /* 2 images per row on tablets and small screens */
    }
}

@media (max-width: 480px) {
    .image_container {
        width: calc(100% - 20px);  /* 1 image per row on mobile devices */
    }
}

This ensures that the images are still displayed properly on different screen sizes.